{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Earth Miles API Documentation","text":"<p>Welcome to the official documentation for the Partner API and OAuth integration. This documentation is intended for developers who want to integrate with our platform.</p>"},{"location":"#overview","title":"Overview","text":"<p>This API allows partners to integrate with our platform to: - Authenticate users via OAuth 2.0 - Award points to users based on transactions - Process transactions and award points</p>"},{"location":"#authentication","title":"Authentication","text":"<p>All API requests must be authenticated using OAuth 2.0. We use the authorization code flow with PKCE (Proof Key for Code Exchange) for security.</p>"},{"location":"#oauth-20-flow","title":"OAuth 2.0 Flow","text":"<ol> <li>Redirect users to the authorization endpoint</li> <li>Users approve the authorization</li> <li>Exchange the authorization code for access tokens</li> <li>Use the access token to make API requests</li> <li>Refresh the token when it expires</li> </ol>"},{"location":"#api-endpoints","title":"API Endpoints","text":"<p>The API is organized around RESTful principles. We use standard HTTP response codes and authentication methods.</p>"},{"location":"#oauth-endpoints","title":"OAuth Endpoints","text":"<ul> <li><code>GET /oauth/authorize</code> - Initiate the OAuth flow</li> <li><code>POST /oauth/consent</code> - Handle user consent</li> <li><code>POST /oauth/token</code> - Exchange authorization code for access token</li> <li><code>POST /oauth/delete-user-data</code> - GDPR compliance endpoint</li> <li><code>POST /oauth/toggle-connection</code> - Enable/disable a partner connection</li> </ul>"},{"location":"#partner-rewards-endpoints","title":"Partner Rewards Endpoints","text":"<ul> <li><code>POST /partner-rewards/award-points</code> - Award points to a user based on partner category</li> <li><code>POST /partner-rewards/process-transaction</code> - Process a transaction and award points</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#get-started","title":"Get Started","text":"<p>To get started with our API, follow these steps:</p> <ol> <li>Register as a partner</li> <li>Create a client application</li> <li>Implement the OAuth flow</li> <li>Integrate with the Partner API</li> </ol>"},{"location":"examples/oauth-flow/","title":"OAuth Flow","text":""},{"location":"examples/oauth-flow/#authorization-flow","title":"Authorization Flow","text":"<p>The OAuth 2.0 authorization flow consists of the following steps:</p> <ol> <li>Redirect the user to our authorization page</li> <li>User grants permissions</li> <li>User is redirected back to your application with an authorization code</li> <li>Your application exchanges the code for access and refresh tokens</li> <li>Use the access token to make API requests</li> <li>Refresh the token when it expires</li> </ol>"},{"location":"examples/overview/","title":"Overview","text":""},{"location":"examples/overview/#best-practices","title":"Best Practices","text":"<ol> <li>Security:</li> <li>Store tokens securely (not in localStorage)</li> <li>Implement HTTPS for all communication</li> <li>Use PKCE for all authorization flows</li> <li> <p>Validate all user inputs</p> </li> <li> <p>Error Handling:</p> </li> <li>Implement proper error handling for API responses</li> <li>Provide clear error messages to users</li> <li> <p>Log errors for debugging</p> </li> <li> <p>User Experience:</p> </li> <li>Offer clear connect/disconnect options</li> <li>Show connection status</li> <li> <p>Implement proper loading states during API calls</p> </li> <li> <p>Compliance:</p> </li> <li>Respect user privacy</li> <li>Implement GDPR requirements</li> <li>Only request necessary scopes</li> </ol>"},{"location":"examples/partner-integration/","title":"Integration Guide","text":"<p>This guide will help you integrate your application with our OAuth and Partner API.</p>"},{"location":"examples/partner-integration/#prerequisites","title":"Prerequisites","text":"<p>Before you begin:</p> <ol> <li>Register as a partner and obtain your client credentials:</li> <li><code>client_id</code></li> <li><code>client_secret</code></li> <li> <p>Allowed redirect URIs</p> </li> <li> <p>Ensure you have the required scopes:</p> </li> <li><code>miles:read</code> - For reading user miles data</li> <li><code>miles:write</code> - For awarding points and processing transactions</li> </ol>"},{"location":"examples/partner-integration/#integration-steps","title":"Integration Steps","text":""},{"location":"examples/partner-integration/#1-implement-the-oauth-flow","title":"1. Implement the OAuth Flow","text":""},{"location":"examples/partner-integration/#backend-setup","title":"Backend Setup","text":"<p>Create endpoints on your server to:</p> <ol> <li>Generate PKCE code verifiers and challenges</li> <li>Store the code verifier securely</li> <li>Handle the OAuth callback and token exchange</li> </ol>"},{"location":"examples/partner-integration/#frontend-implementation","title":"Frontend Implementation","text":"<p>Add a \"Connect\" button in your app that redirects users to our authorization endpoint:</p> <pre><code>function connectToMilesApp() {\n  // Generate PKCE code verifier and challenge\n  const codeVerifier = generateCodeVerifier();\n\n  // Store code verifier in session storage\n  sessionStorage.setItem('code_verifier', codeVerifier);\n\n  // Generate code challenge from verifier\n  generateCodeChallenge(codeVerifier).then(codeChallenge =&gt; {\n    // Build authorization URL\n    const authUrl = new URL('https://your-api-domain.com/oauth/authorize');\n    authUrl.searchParams.append('client_id', 'your_client_id');\n    authUrl.searchParams.append('redirect_uri', 'https://your-app.com/callback');\n    authUrl.searchParams.append('scope', 'miles:read miles:write');\n    authUrl.searchParams.append('state', generateRandomState());\n    authUrl.searchParams.append('response_type', 'code');\n    authUrl.searchParams.append('code_challenge', codeChallenge);\n    authUrl.searchParams.append('code_challenge_method', 'S256');\n\n    // Redirect to authorization page\n    window.location.href = authUrl.toString();\n  });\n}\n</code></pre>"},{"location":"examples/partner-integration/#handling-the-callback","title":"Handling the Callback","text":"<p>Create a callback endpoint on your server to exchange the authorization code for tokens:</p> <pre><code>app.get('/callback', async (req, res) =&gt; {\n  const { code, state } = req.query;\n\n  // Verify state parameter\n  if (state !== req.session.oauth_state) {\n    return res.status(400).send('Invalid state parameter');\n  }\n\n  // Retrieve code verifier from session\n  const codeVerifier = req.session.code_verifier;\n\n  try {\n    // Exchange code for tokens\n    const response = await axios.post('https://your-api-domain.com/oauth/token', {\n      grant_type: 'authorization_code',\n      code,\n      client_id: 'your_client_id',\n      client_secret: 'your_client_secret',\n      code_verifier: codeVerifier\n    });\n\n    // Store tokens securely\n    req.session.access_token = response.data.access_token;\n    req.session.refresh_token = response.data.refresh_token;\n    req.session.token_expiry = Date.now() + (response.data.expires_in * 1000);\n\n    // Redirect to success page\n    res.redirect('/connection-success');\n  } catch (error) {\n    console.error('Token exchange error:', error.response?.data || error.message);\n    res.redirect('/connection-error');\n  }\n});\n</code></pre>"},{"location":"examples/partner-integration/#2-making-api-requests","title":"2. Making API Requests","text":"<p>Once you have obtained an access token, you can use it to make requests to the Partner API:</p> <pre><code>async function awardPoints(userId, categoryId, pointsToAward) {\n  try {\n    const response = await axios.post('https://your-api-domain.com/partner-rewards/award-points', {\n      userId,\n      categoryId,\n      pointsToAward\n    }, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error awarding points:', error.response?.data || error.message);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"examples/partner-integration/#3-token-refresh","title":"3. Token Refresh","text":"<p>Implement token refresh functionality to ensure your application maintains access:</p> <pre><code>async function refreshAccessToken() {\n  try {\n    const response = await axios.post('https://your-api-domain.com/oauth/token', {\n      grant_type: 'refresh_token',\n      refresh_token: refreshToken,\n      client_id: 'your_client_id'\n    });\n\n    // Update stored tokens\n    accessToken = response.data.access_token;\n    refreshToken = response.data.refresh_token;\n    tokenExpiry = Date.now() + (response.data.expires_in * 1000);\n\n    return accessToken;\n  } catch (error) {\n    console.error('Token refresh error:', error.response?.data || error.message);\n    // Redirect user to re-authenticate\n    window.location.href = '/connect';\n  }\n}\n\n// Function to ensure valid token before making API requests\nasync function getValidAccessToken() {\n  if (Date.now() &gt;= tokenExpiry - 60000) { // Refresh if less than 1 minute remaining\n    return await refreshAccessToken();\n  }\n  return accessToken;\n}\n</code></pre>"},{"location":"examples/partner-integration/#4-handling-connection-toggle","title":"4. Handling Connection Toggle","text":"<p>Allow users to disconnect from your app:</p> <pre><code>async function toggleConnection(enabled = false) {\n  try {\n    const response = await axios.post('https://your-api-domain.com/oauth/toggle-connection', {\n      partnerId: 'your_client_id',\n      enabled\n    }, {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Error toggling connection:', error.response?.data || error.message);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"oauth/authorization/","title":"Authorization","text":""},{"location":"oauth/authorization/#1-initiating-the-oauth-flow","title":"1. Initiating the OAuth Flow","text":"<p>To start the OAuth flow, redirect the user to our authorization endpoint:</p> <pre><code>GET /oauth/authorize\n</code></pre>"},{"location":"oauth/authorization/#query-parameters","title":"Query Parameters","text":"Parameter Required Description <code>client_id</code> Yes Your client ID <code>redirect_uri</code> Yes URI to redirect to after authorization (must be pre-registered) <code>scope</code> Yes Space-separated list of scopes (e.g., \"miles:read miles:write\") <code>state</code> No Random string to prevent CSRF attacks <code>response_type</code> Yes Must be \"code\" <code>code_challenge</code> Yes PKCE code challenge <code>code_challenge_method</code> Yes Must be \"S256\""},{"location":"oauth/authorization/#pkce-implementation","title":"PKCE Implementation","text":"<p>For PKCE, you need to:</p> <ol> <li>Generate a random <code>code_verifier</code> (between 43-128 characters)</li> <li>Create a <code>code_challenge</code> by hashing the verifier with SHA-256 and base64url-encoding it:</li> </ol> <pre><code>// Example in JavaScript\nfunction generateCodeVerifier() {\n  const array = new Uint8Array(32);\n  window.crypto.getRandomValues(array);\n  return base64UrlEncode(array);\n}\n\nfunction generateCodeChallenge(codeVerifier) {\n  const encoder = new TextEncoder();\n  const data = encoder.encode(codeVerifier);\n  return window.crypto.subtle.digest('SHA-256', data)\n    .then(hashBuffer =&gt; {\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      return base64UrlEncode(hashArray);\n    });\n}\n\n// Base64 URL encode (RFC 4648)\nfunction base64UrlEncode(array) {\n  return btoa(String.fromCharCode.apply(null, array))\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n    .replace(/=+$/, '');\n}\n</code></pre>"},{"location":"oauth/authorization/#example-request","title":"Example Request","text":"<pre><code>GET /oauth/authorize?\n  client_id=your_client_id&amp;\n  redirect_uri=https://your-app.com/callback&amp;\n  scope=miles:read%20miles:write&amp;\n  state=random_state_string&amp;\n  response_type=code&amp;\n  code_challenge=CODE_CHALLENGE&amp;\n  code_challenge_method=S256\n</code></pre>"},{"location":"oauth/authorization/#response","title":"Response","text":"<p>If successful, the API will return a JSON response with:</p> <pre><code>{\n  \"message\": \"Authorization code created successfully\",\n  \"client_id\": \"your_client_id\",\n  \"scopes\": [\"miles:read\", \"miles:write\"],\n  \"redirect_uri\": \"https://your-app.com/callback\",\n  \"state\": \"random_state_string\"\n}\n</code></pre>"},{"location":"oauth/authorization/#2-handling-user-consent","title":"2. Handling User Consent","text":"<p>After the user approves the authorization, you need to handle the consent:</p> <pre><code>POST /oauth/consent\n</code></pre>"},{"location":"oauth/authorization/#request-body","title":"Request Body","text":"<pre><code>{\n  \"client_id\": \"your_client_id\",\n  \"approve\": true,\n  \"redirect_uri\": \"https://your-app.com/callback\",\n  \"state\": \"random_state_string\"\n}\n</code></pre>"},{"location":"oauth/authorization/#response_1","title":"Response","text":"<p>If approved, the API will return:</p> <pre><code>{\n  \"code\": \"authorization_code\",\n  \"redirect_uri\": \"https://your-app.com/callback\",\n  \"state\": \"random_state_string\"\n}\n</code></pre>"},{"location":"oauth/overview/","title":"OAuth Authorization","text":"<p>Our API uses OAuth 2.0 with PKCE (Proof Key for Code Exchange) for secure authorization. This page explains how to implement the authorization code flow.</p>"},{"location":"oauth/token-exchange/","title":"Token Exchange","text":""},{"location":"oauth/token-exchange/#3-exchanging-the-authorization-code","title":"3. Exchanging the Authorization Code","text":"<p>Exchange the authorization code for access and refresh tokens:</p> <pre><code>POST /oauth/token\n</code></pre>"},{"location":"oauth/token-exchange/#request-body","title":"Request Body","text":"<pre><code>{\n  \"grant_type\": \"authorization_code\",\n  \"code\": \"authorization_code\",\n  \"client_id\": \"your_client_id\",\n  \"client_secret\": \"your_client_secret\",\n  \"code_verifier\": \"your_code_verifier\"\n}\n</code></pre>"},{"location":"oauth/token-exchange/#response","title":"Response","text":"<pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"refresh_token\": \"refresh_token_value\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"miles:read miles:write\"\n}\n</code></pre>"},{"location":"oauth/token-exchange/#4-refreshing-an-access-token","title":"4. Refreshing an Access Token","text":"<p>When the access token expires, you can obtain a new one using the refresh token:</p> <pre><code>POST /oauth/token\n</code></pre>"},{"location":"oauth/token-exchange/#request-body_1","title":"Request Body","text":"<pre><code>{\n  \"grant_type\": \"refresh_token\",\n  \"refresh_token\": \"refresh_token_value\",\n  \"client_id\": \"your_client_id\"\n}\n</code></pre>"},{"location":"oauth/token-exchange/#response_1","title":"Response","text":"<pre><code>{\n  \"access_token\": \"new_access_token\",\n  \"refresh_token\": \"new_refresh_token\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"scope\": \"miles:read miles:write\"\n}\n</code></pre>"},{"location":"oauth/token-exchange/#security-considerations","title":"Security Considerations","text":"<ol> <li>Always use HTTPS for all OAuth requests</li> <li>Store tokens securely and never expose them to the frontend</li> <li>Validate all redirect URIs</li> <li>Implement PKCE for all authorization flows</li> <li>Use the state parameter to prevent CSRF attacks</li> </ol>"},{"location":"partner-api/overview/","title":"Partner Rewards API","text":"<p>The Partner Rewards API allows you to award points to users based on transactions and partner categories. This API requires OAuth 2.0 authentication with the <code>miles:write</code> scope.</p>"},{"location":"partner-api/overview/#notes","title":"Notes","text":"<ul> <li>Points are awarded only for transactions in DKK currency</li> <li>Transactions must have unique transaction IDs</li> <li>The partner must have sufficient miles budget to award points</li> <li>Keyword matching is performed on transaction descriptions to associate with memberships</li> </ul>"},{"location":"partner-api/rewards/","title":"Rewards API","text":""},{"location":"partner-api/rewards/#awarding-points","title":"Awarding Points","text":"<p>Award points to a user based on a partner category:</p> <pre><code>POST /partner-rewards/award-points\n</code></pre>"},{"location":"partner-api/rewards/#authorization","title":"Authorization","text":"<p>Requires a valid OAuth access token with the <code>miles:write</code> scope.</p> <pre><code>Authorization: Bearer {access_token}\n</code></pre>"},{"location":"partner-api/rewards/#request-body","title":"Request Body","text":"<pre><code>{\n  \"categoryId\": \"partner_category_id\",\n  \"userId\": \"user_id\",\n  \"pointsToAward\": 100\n}\n</code></pre> Parameter Type Description <code>categoryId</code> string ID of the partner category <code>userId</code> string ID of the user to award points to <code>pointsToAward</code> number Number of points to award"},{"location":"partner-api/rewards/#response","title":"Response","text":""},{"location":"partner-api/rewards/#success-200-ok","title":"Success (200 OK)","text":"<pre><code>{\n  \"message\": \"Points awarded successfully\"\n}\n</code></pre>"},{"location":"partner-api/rewards/#error-responses","title":"Error Responses","text":"<p>400 Bad Request <pre><code>{\n  \"error\": \"Partner category is not active\"\n}\n</code></pre></p> <p>404 Not Found <pre><code>{\n  \"error\": \"Partner category not found or does not belong to the partner\"\n}\n</code></pre></p> <p>500 Internal Server Error <pre><code>{\n  \"error\": \"Could not award partner points\"\n}\n</code></pre></p>"},{"location":"partner-api/transactions/","title":"Transactions","text":""},{"location":"partner-api/transactions/#processing-transactions","title":"Processing Transactions","text":"<p>Process a transaction and award points to the user:</p> <pre><code>POST /partner-rewards/process-transaction\n</code></pre>"},{"location":"partner-api/transactions/#authorization","title":"Authorization","text":"<p>Requires a valid OAuth access token with the <code>miles:write</code> scope.</p> <pre><code>Authorization: Bearer {access_token}\n</code></pre>"},{"location":"partner-api/transactions/#request-body","title":"Request Body","text":"<pre><code>{\n  \"userId\": \"user_id\",\n  \"transactions\": [\n    {\n      \"description\": \"Purchase at Store XYZ\",\n      \"amount\": 100.50,\n      \"currency\": \"DKK\",\n      \"transactionId\": \"unique_transaction_id\",\n      \"transactionDate\": \"2023-07-25T10:30:00Z\"\n    }\n  ]\n}\n</code></pre> Parameter Type Description <code>userId</code> string ID of the user <code>transactions</code> array List of transactions <code>transactions[].description</code> string Description of the transaction <code>transactions[].amount</code> number Transaction amount <code>transactions[].currency</code> string Currency code (e.g., \"DKK\") <code>transactions[].transactionId</code> string Unique ID for the transaction <code>transactions[].transactionDate</code> string ISO-8601 timestamp of the transaction"},{"location":"partner-api/transactions/#response","title":"Response","text":""},{"location":"partner-api/transactions/#success-200-ok","title":"Success (200 OK)","text":"<pre><code>{\n  \"message\": \"Transaction processed successfully\"\n}\n</code></pre>"},{"location":"partner-api/transactions/#error-responses","title":"Error Responses","text":"<p>400 Bad Request <pre><code>{\n  \"error\": \"Invalid transaction data\"\n}\n</code></pre></p> <p>500 Internal Server Error <pre><code>{\n  \"error\": \"Unexpected error occurred\"\n}\n</code></pre></p>"}]}